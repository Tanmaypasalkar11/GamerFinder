generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          Int       @id @default(autoincrement())
  email                       String    @unique
  name                        String?
  password                    String?
  image                       String?
  emailVerified               DateTime?
  emailVerifiedAt             DateTime?
  emailVerifiedToken          String?
  emailVerifiedTokenExpiresAt DateTime?
  isOnline                    Boolean   @default(false)
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  profile           Profile?
  accounts          Account[]
  sessions          Session[]
  reviewsWritten    Review[]           @relation("WrittenReviews")
  reviewsReceived   Review[]           @relation("ReceivedReviews")
  payments          Payment[]
  availabilitySlots AvailabilitySlot[]
}

model Account {
  id                       String  @id @default(uuid())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String  @unique
  refresh_token            String?
  access_token             String?
  refresh_token_expires_in Int? // âœ… Add this line
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  displayName String
  bio         String?
  avatarUrl   String?
  hourlyRate  Float
  languages   String[]
  gender      String?
  location    String?
  rating      Float    @default(0)

  games UserGame[]
}

model Game {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  imageUrl String?

  users UserGame[]
}

model UserGame {
  id     Int @id @default(autoincrement())
  userId Int
  gameId Int

  user Profile @relation(fields: [userId], references: [userId])
  game Game    @relation(fields: [gameId], references: [id])

  @@unique([userId, gameId])
}

model AvailabilitySlot {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])

  dayOfWeek Int // 0 = Sunday, 1 = Monday, etc.
  startTime String // "14:00"
  endTime   String // "18:00"
  timezone  String // e.g. "UTC", "America/New_York"
}

model Payment {
  id       Int     @id @default(autoincrement())
  userId   Int // who paid
  amount   Float
  currency String  @default("USD")
  status   String // paid, refunded, failed
  stripeId String?

  user User @relation(fields: [userId], references: [id])
}

model Review {
  id       Int @id @default(autoincrement())
  authorId Int // user who wrote the review
  targetId Int // user being reviewed

  rating  Int     @default(5)
  comment String?

  author User @relation("WrittenReviews", fields: [authorId], references: [id])
  target User @relation("ReceivedReviews", fields: [targetId], references: [id])
}
