generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          Int                @id @default(autoincrement())
  email                       String             @unique
  password                    String?
  isOnline                    Boolean            @default(false)
  createdAt                   DateTime           @default(now())
  updatedAt                   DateTime           @updatedAt
  name                        String?
  image                       String?
  emailVerified               DateTime?
  emailVerifiedAt             DateTime?
  emailVerifiedToken          String?
  emailVerifiedTokenExpiresAt DateTime?
  bio                         String?
  games                       String[]
  languages                   String[]
  hourlyRate                  Float?
  accounts                    Account[]
  availabilitySlots           AvailabilitySlot[]
  Listing                     Listing[]
  payments                    Payment[]
  profile                     Profile?
  reviewsWritten              Review[]           @relation("WrittenReviews")
  reviewsReceived             Review[]           @relation("ReceivedReviews")
  sessions                    Session[]
}

model Account {
  id                       String  @id @default(uuid())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String  @unique
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Listing {
  id            String   @id @default(cuid())
  userId        Int
  game          String
  title         String
  description   String
  pricePerHour  Float
  availability  String?
  images        String[]
  voiceIntroUrl String?
  tags          String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id          Int        @id @default(autoincrement())
  userId      Int        @unique
  displayName String
  bio         String?
  avatarUrl   String?
  hourlyRate  Float
  languages   String[]
  gender      String?
  location    String?
  rating      Float      @default(0)
  user        User       @relation(fields: [userId], references: [id])
  games       UserGame[]
}

model Game {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  imageUrl String?
  users    UserGame[]
}

model UserGame {
  id     Int     @id @default(autoincrement())
  userId Int
  gameId Int
  game   Game    @relation(fields: [gameId], references: [id])
  user   Profile @relation(fields: [userId], references: [userId])

  @@unique([userId, gameId])
}

model AvailabilitySlot {
  id        Int    @id @default(autoincrement())
  userId    Int
  dayOfWeek Int
  startTime String
  endTime   String
  timezone  String
  user      User   @relation(fields: [userId], references: [id])
}

model Payment {
  id       Int     @id @default(autoincrement())
  userId   Int
  amount   Float
  currency String  @default("USD")
  status   String
  stripeId String?
  user     User    @relation(fields: [userId], references: [id])
}

model Review {
  id       Int     @id @default(autoincrement())
  authorId Int
  targetId Int
  rating   Int     @default(5)
  comment  String?
  author   User    @relation("WrittenReviews", fields: [authorId], references: [id])
  target   User    @relation("ReceivedReviews", fields: [targetId], references: [id])
}
